{"version":3,"sources":["App.styles.ts","components/ListItem/styles.ts","components/ListItem/index.tsx","components/area/styles.ts","components/area/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Area","Header","h1","done","ListItem","item","onChange","type","checked","e","id","target","name","onEnter","useState","inputText","setInputText","className","placeholder","value","onKeyUp","code","App","list","setList","handleTaskChange","newList","i","taskName","push","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAEaA,EAAYC,IAAOC,IAAV,mGAMTC,EAAOF,IAAOC,IAAV,oFAMJE,EAASH,IAAOI,GAAV,2JCRNL,EAAYC,IAAOC,KAAI,gBAAGI,EAAH,EAAGA,KAAH,+RAiBbA,EAAO,eAAiB,UAjBX,e,OCGvBC,EAAW,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAC/B,OACE,eAAC,EAAD,CAAaH,KAAME,EAAKF,KAAxB,UACE,uBACAI,KAAK,WACLC,QAASH,EAAKF,KACdG,SAAU,SAAAG,GAAC,OAAIH,EAASD,EAAKK,GAAID,EAAEE,OAAOH,YAE1C,gCAAQH,EAAKO,WCfNf,EAAYC,IAAOC,IAAV,oVCKTC,EAAO,SAAC,GAAwB,IAAtBa,EAAqB,EAArBA,QACrB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAQA,OACE,eAAC,EAAD,WACE,qBAAKC,UAAU,QAAf,oBACA,uBACEV,KAAK,OACLW,YAAY,sBACZC,MAAOJ,EACPT,SAAU,SAAAG,GAAC,OAAEO,EAAaP,EAAEE,OAAOQ,QACnCC,QAdc,SAACX,GACL,UAAXA,EAAEY,MAAkC,KAAdN,IACrBF,EAAQE,GACRC,EAAa,YCqCNM,EA5CH,WACV,MAAwBR,mBAAiB,CACvC,CAAEJ,GAAI,EAAGE,KAAM,iBAAeT,MAAM,GACpC,CAAEO,GAAI,EAAGE,KAAM,eAAgBT,MAAM,KAFvC,mBAAOoB,EAAP,KAAaC,EAAb,KAeMC,EAAmB,SAACf,EAAYP,GACpC,IAAIuB,EAAO,YAAOH,GAClB,IAAI,IAAII,KAAKD,EACRA,EAAQC,GAAGjB,KAAOA,IACnBgB,EAAQC,GAAGxB,KAAOA,GAGtBqB,EAAQE,IAGV,OACE,cAAC,EAAD,UACC,eAAC,EAAD,WACE,cAAC,EAAD,+BAEC,cAAC,EAAD,CAAMb,QAzBU,SAACe,GACrB,IAAIF,EAAO,YAAOH,GAClBG,EAAQG,KAAK,CACXnB,GAAIa,EAAKO,OAAQ,EACjBlB,KAAMgB,EACNzB,MAAM,IAERqB,EAAQE,MAoBHH,EAAKQ,KAAI,SAAC1B,EAAM2B,GAAP,OACR,cAAC,EAAD,CAEA3B,KAAMA,EACNC,SAAUmB,GAFLO,YC3BAC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ec24624f.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  background-color: #17181F;\r\n  color: #797A81;\r\n  min-height: 100vh;\r\n`;\r\n\r\nexport const Area = styled.div`\r\n  margin: auto;\r\n  max-width: 980px;\r\n  padding: 10px;\r\n`;\r\n\r\nexport const Header = styled.h1`\r\n  margin: 0;\r\n  padding: 0;\r\n  color: #FFF;\r\n  text-align: center;\r\n  border-bottom: 1px solid #444;\r\n  padding-bottom: 20px;\r\n`;","import styled from 'styled-components';\r\n\r\ntype ContainerProps = { \r\n  done: boolean;\r\n}\r\n\r\nexport const Container = styled.div(({ done }: ContainerProps) => (\r\n  `\r\n  display: flex;\r\n  background-color: #20212C;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  margin-bottom: 10px;\r\n  align-items: center;\r\n\r\n  input {\r\n    width: 25px;\r\n    height: 25px;\r\n    margin-right: 5px;\r\n  }\r\n\r\n  label {\r\n    color: #CCC;\r\n    text-decoration: ${done ? 'line-through' : 'initial'};\r\n  }\r\n`\r\n));","import * as C from './styles';\r\nimport { Item } from '../../types/Item';\r\n\r\n\r\ntype Props = {\r\n  item: Item\r\n  onChange: (id: number, done: boolean) => void\r\n}\r\n\r\nexport const ListItem = ({ item, onChange }: Props) => {\r\n  return (\r\n    <C.Container done={item.done}>\r\n      <input \r\n      type=\"checkbox\" \r\n      checked={item.done}\r\n      onChange={e => onChange(item.id, e.target.checked)} \r\n      />\r\n      <label>{item.name}</label>\r\n    </C.Container>\r\n  );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  border: 1px solid #555;\r\n  border-radius: 15px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .image {\r\n    margin-right: 5px;\r\n  }\r\n  \r\n  input {\r\n    border: 0px;\r\n    background: transparent;\r\n    outline: 0;\r\n    color: #FFF;\r\n    font-size: 18px;\r\n    flex: 1;\r\n  }\r\n`;","import { useState, KeyboardEvent } from 'react';\r\nimport * as C from './styles';\r\n\r\ntype Props = {\r\n  onEnter: (taskName: string) => void\r\n}\r\n\r\nexport const Area = ({ onEnter }: Props) => {\r\n  const [inputText, setInputText] = useState('');\r\n\r\n  const handleKeyUp = (e: KeyboardEvent) => {\r\n    if(e.code === 'Enter' && inputText !== '') {\r\n        onEnter(inputText);\r\n        setInputText('');\r\n    }\r\n  }\r\n  return (\r\n    <C.Container>\r\n      <div className=\"image\">➕</div>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Adicione uma tarefa\"\r\n        value={inputText}\r\n        onChange={e=>setInputText(e.target.value)}\r\n        onKeyUp={handleKeyUp}\r\n      />\r\n    </C.Container>\r\n  );\r\n}","import { useState } from 'react';\nimport * as C from './App.styles';\nimport { Item } from './types/Item';\nimport { ListItem } from './components/ListItem';\nimport { Area } from './components/area';\n\nconst App = () => {\n  const [list, setList] = useState<Item[]>([\n    { id: 1, name: 'Comprar pão', done: false },\n    { id: 2, name: 'Comprar bolo', done: false },\n  ]);\n\n  const handleAddTask = (taskName: string) => {\n    let newList = [...list];\n    newList.push({\n      id: list.length +1,\n      name: taskName,\n      done: false\n    });\n    setList(newList);\n  }\n\n  const handleTaskChange = (id: number, done: boolean) => {\n    let newList = [...list];\n    for(let i in newList) {\n      if(newList[i].id === id) {\n        newList[i].done = done;\n      }\n    }\n    setList(newList);\n  }\n\n  return (\n    <C.Container>\n     <C.Area>\n       <C.Header>Lista de Tarefas</C.Header>\n\n        <Area onEnter={handleAddTask} />\n\n        {list.map((item, index) => (\n          <ListItem \n          key={index} \n          item={item} \n          onChange={handleTaskChange} />\n        ))}\n     </C.Area>\n    </C.Container>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}